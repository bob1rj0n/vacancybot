"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botAdminPlugin = exports.bot_admin = void 0;
const tslib_1 = require("tslib");
const fastify_plugin_1 = tslib_1.__importDefault(require("fastify-plugin"));
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const telegraf_1 = require("telegraf");
const telegraf_session_mongodb_1 = require("telegraf-session-mongodb");
const config_1 = require("../../common/config");
const SceneName_1 = require("../../common/constant/SceneName");
const admin_scene_1 = require("../snece/2.scenes/admin.scene");
const reject_scene_1 = require("../snece/2.scenes/reject.scene");
exports.bot_admin = new telegraf_1.Telegraf(config_1.ENV.ADMIN_BOT_TOKEN);
const stages = new telegraf_1.Scenes.Stage([
    admin_scene_1.adminScene,
    reject_scene_1.rejectVacansyScene,
]);
async function start(ctx) {
    ctx.scene.enter(SceneName_1.SceneNames.ADMIN);
}
stages.command('start', start);
async function plugin(server, opt, done) {
    server.post("/" + config_1.ENV.ADMIN_BOT_TOKEN, (req, res) => res.reply({ root: true }));
    exports.bot_admin.use((0, telegraf_session_mongodb_1.session)(mongoose_1.default.connection.db, { collectionName: "sessions2", sessionName: "session" }));
    exports.bot_admin.use(stages.middleware());
    await server.register(require("@fastify/middie"));
    await server.register(exports.bot_admin.webhookCallback("/" + config_1.ENV.ADMIN_BOT_TOKEN));
    exports.bot_admin.start(start);
    exports.bot_admin.launch();
    done();
}
exports.botAdminPlugin = (0, fastify_plugin_1.default)(plugin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uYm90LnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ib3QvcGx1Z2lucy9hZG1pbi5ib3QucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0RUFBZ0M7QUFDaEMsZ0VBQWdDO0FBQ2hDLHVDQUE2RDtBQUM3RCx1RUFBbUQ7QUFDbkQsZ0RBQTBDO0FBQzFDLCtEQUE2RDtBQUM3RCwrREFBMkQ7QUFDM0QsaUVBQW9FO0FBU3ZELFFBQUEsU0FBUyxHQUFHLElBQUksbUJBQVEsQ0FBWSxZQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBTSxDQUFDLEtBQUssQ0FBWTtJQUN2Qyx3QkFBVTtJQUNWLGlDQUFrQjtDQUNyQixDQUFDLENBQUE7QUFFRixLQUFLLFVBQVUsS0FBSyxDQUFDLEdBQUc7SUFDcEIsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsc0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtBQUNyQyxDQUFDO0FBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7QUFFOUIsS0FBSyxVQUFVLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUk7SUFDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsWUFBRyxDQUFDLGVBQWUsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQy9FLGlCQUFTLENBQUMsR0FBRyxDQUFDLElBQUEsa0NBQU8sRUFBQyxrQkFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDdkcsaUJBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUE7SUFDbEMsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUE7SUFDakQsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsR0FBRyxZQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUMzRSxpQkFBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixpQkFBUyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ2xCLElBQUksRUFBRSxDQUFBO0FBQ1YsQ0FBQztBQUVZLFFBQUEsY0FBYyxHQUFHLElBQUEsd0JBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcCBmcm9tIFwiZmFzdGlmeS1wbHVnaW5cIjtcclxuaW1wb3J0IG1vbmdvb3NlIGZyb20gXCJtb25nb29zZVwiO1xyXG5pbXBvcnQgeyBDb250ZXh0LCBTY2VuZXMsIFRlbGVncmFmLCBNYXJrdXAgfSBmcm9tIFwidGVsZWdyYWZcIjtcclxuaW1wb3J0IHsgc2Vzc2lvbiB9IGZyb20gXCJ0ZWxlZ3JhZi1zZXNzaW9uLW1vbmdvZGJcIjtcclxuaW1wb3J0IHsgRU5WIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb25maWdcIjtcclxuaW1wb3J0IHsgU2NlbmVOYW1lcyB9IGZyb20gXCIuLi8uLi9jb21tb24vY29uc3RhbnQvU2NlbmVOYW1lXCI7XHJcbmltcG9ydCB7IGFkbWluU2NlbmUgfSBmcm9tIFwiLi4vc25lY2UvMi5zY2VuZXMvYWRtaW4uc2NlbmVcIjtcclxuaW1wb3J0IHsgcmVqZWN0VmFjYW5zeVNjZW5lIH0gZnJvbSBcIi4uL3NuZWNlLzIuc2NlbmVzL3JlamVjdC5zY2VuZVwiO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTXlDb250ZXh0IGV4dGVuZHMgQ29udGV4dCB7XHJcbiAgICBzZXNzaW9uOiBhbnk7XHJcbiAgICBzY2VuZTogU2NlbmVzLlNjZW5lQ29udGV4dFNjZW5lPE15Q29udGV4dD47XHJcbiAgICBLYW1pbmE6IFwiRGFzdHVyY2hpXCJcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGJvdF9hZG1pbiA9IG5ldyBUZWxlZ3JhZjxNeUNvbnRleHQ+KEVOVi5BRE1JTl9CT1RfVE9LRU4pXHJcblxyXG5jb25zdCBzdGFnZXMgPSBuZXcgU2NlbmVzLlN0YWdlPE15Q29udGV4dD4oW1xyXG4gICAgYWRtaW5TY2VuZSxcclxuICAgIHJlamVjdFZhY2Fuc3lTY2VuZSxcclxuXSlcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0KGN0eCkge1xyXG4gICAgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuQURNSU4pXHJcbn1cclxuXHJcbnN0YWdlcy5jb21tYW5kKCdzdGFydCcsIHN0YXJ0KVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcGx1Z2luKHNlcnZlciwgb3B0LCBkb25lKSB7XHJcbiAgICBzZXJ2ZXIucG9zdChcIi9cIiArIEVOVi5BRE1JTl9CT1RfVE9LRU4sIChyZXEsIHJlcykgPT4gcmVzLnJlcGx5KHsgcm9vdDogdHJ1ZSB9KSlcclxuICAgIGJvdF9hZG1pbi51c2Uoc2Vzc2lvbihtb25nb29zZS5jb25uZWN0aW9uLmRiLCB7IGNvbGxlY3Rpb25OYW1lOiBcInNlc3Npb25zMlwiLCBzZXNzaW9uTmFtZTogXCJzZXNzaW9uXCIgfSkpXHJcbiAgICBib3RfYWRtaW4udXNlKHN0YWdlcy5taWRkbGV3YXJlKCkpXHJcbiAgICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIocmVxdWlyZShcIkBmYXN0aWZ5L21pZGRpZVwiKSlcclxuICAgIGF3YWl0IHNlcnZlci5yZWdpc3Rlcihib3RfYWRtaW4ud2ViaG9va0NhbGxiYWNrKFwiL1wiICsgRU5WLkFETUlOX0JPVF9UT0tFTikpXHJcbiAgICBib3RfYWRtaW4uc3RhcnQoc3RhcnQpO1xyXG4gICAgYm90X2FkbWluLmxhdW5jaCgpXHJcbiAgICBkb25lKClcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGJvdEFkbWluUGx1Z2luID0gZnAocGx1Z2luKTtcclxuIl19