"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botAdminPlugin = exports.bot_admin = void 0;
const tslib_1 = require("tslib");
const fastify_plugin_1 = tslib_1.__importDefault(require("fastify-plugin"));
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const telegraf_1 = require("telegraf");
const telegraf_session_mongodb_1 = require("telegraf-session-mongodb");
const config_1 = require("../../common/config");
const SceneName_1 = require("../../common/constant/SceneName");
const admin_scene_1 = require("../snece/2.scenes/admin.scene");
const reject_scene_1 = require("../snece/2.scenes/reject.scene");
exports.bot_admin = new telegraf_1.Telegraf(config_1.ENV.ADMIN_BOT_TOKEN);
const stages = new telegraf_1.Scenes.Stage([
    admin_scene_1.adminScene,
    reject_scene_1.rejectVacansyScene,
]);
async function start(ctx) {
    if (ctx.from.id == 1661832397) {
        ctx.scene.enter(SceneName_1.SceneNames.ADMIN);
    }
}
stages.command('start', start);
async function plugin(server, opt, done) {
    server.post("/" + config_1.ENV.ADMIN_BOT_TOKEN, (req, res) => res.reply({ root: true }));
    exports.bot_admin.use((0, telegraf_session_mongodb_1.session)(mongoose_1.default.connection.db, { collectionName: "sessions2", sessionName: "session" }));
    exports.bot_admin.use(stages.middleware());
    await server.register(require("@fastify/middie"));
    await server.register(exports.bot_admin.webhookCallback("/" + config_1.ENV.ADMIN_BOT_TOKEN));
    exports.bot_admin.start(start);
    exports.bot_admin.launch();
    done();
}
exports.botAdminPlugin = (0, fastify_plugin_1.default)(plugin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uYm90LnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ib3QvcGx1Z2lucy9hZG1pbi5ib3QucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0RUFBZ0M7QUFDaEMsZ0VBQWdDO0FBQ2hDLHVDQUE2RDtBQUM3RCx1RUFBbUQ7QUFDbkQsZ0RBQTBDO0FBQzFDLCtEQUE2RDtBQUM3RCwrREFBMkQ7QUFDM0QsaUVBQW9FO0FBU3ZELFFBQUEsU0FBUyxHQUFHLElBQUksbUJBQVEsQ0FBWSxZQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBTSxDQUFDLEtBQUssQ0FBWTtJQUN2Qyx3QkFBVTtJQUNWLGlDQUFrQjtDQUNyQixDQUFDLENBQUE7QUFFRixLQUFLLFVBQVUsS0FBSyxDQUFDLEdBQUc7SUFDcEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxVQUFVLEVBQUU7UUFDM0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsc0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUNwQztBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUU5QixLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxZQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDL0UsaUJBQVMsQ0FBQyxHQUFHLENBQUMsSUFBQSxrQ0FBTyxFQUFDLGtCQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN2RyxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUNsQyxNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQTtJQUNqRCxNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsaUJBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxHQUFHLFlBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFBO0lBQzNFLGlCQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLGlCQUFTLENBQUMsTUFBTSxFQUFFLENBQUE7SUFDbEIsSUFBSSxFQUFFLENBQUE7QUFDVixDQUFDO0FBRVksUUFBQSxjQUFjLEdBQUcsSUFBQSx3QkFBRSxFQUFDLE1BQU0sQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZwIGZyb20gXCJmYXN0aWZ5LXBsdWdpblwiO1xyXG5pbXBvcnQgbW9uZ29vc2UgZnJvbSBcIm1vbmdvb3NlXCI7XHJcbmltcG9ydCB7IENvbnRleHQsIFNjZW5lcywgVGVsZWdyYWYsIE1hcmt1cCB9IGZyb20gXCJ0ZWxlZ3JhZlwiO1xyXG5pbXBvcnQgeyBzZXNzaW9uIH0gZnJvbSBcInRlbGVncmFmLXNlc3Npb24tbW9uZ29kYlwiO1xyXG5pbXBvcnQgeyBFTlYgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2NvbmZpZ1wiO1xyXG5pbXBvcnQgeyBTY2VuZU5hbWVzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb25zdGFudC9TY2VuZU5hbWVcIjtcclxuaW1wb3J0IHsgYWRtaW5TY2VuZSB9IGZyb20gXCIuLi9zbmVjZS8yLnNjZW5lcy9hZG1pbi5zY2VuZVwiO1xyXG5pbXBvcnQgeyByZWplY3RWYWNhbnN5U2NlbmUgfSBmcm9tIFwiLi4vc25lY2UvMi5zY2VuZXMvcmVqZWN0LnNjZW5lXCI7XHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNeUNvbnRleHQgZXh0ZW5kcyBDb250ZXh0IHtcclxuICAgIHNlc3Npb246IGFueTtcclxuICAgIHNjZW5lOiBTY2VuZXMuU2NlbmVDb250ZXh0U2NlbmU8TXlDb250ZXh0PjtcclxuICAgIEthbWluYTogXCJEYXN0dXJjaGlcIlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgYm90X2FkbWluID0gbmV3IFRlbGVncmFmPE15Q29udGV4dD4oRU5WLkFETUlOX0JPVF9UT0tFTilcclxuXHJcbmNvbnN0IHN0YWdlcyA9IG5ldyBTY2VuZXMuU3RhZ2U8TXlDb250ZXh0PihbXHJcbiAgICBhZG1pblNjZW5lLFxyXG4gICAgcmVqZWN0VmFjYW5zeVNjZW5lLFxyXG5dKVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gc3RhcnQoY3R4KSB7XHJcbiAgICBpZiAoY3R4LmZyb20uaWQgPT0gMTY2MTgzMjM5Nykge1xyXG4gICAgICAgIGN0eC5zY2VuZS5lbnRlcihTY2VuZU5hbWVzLkFETUlOKVxyXG4gICAgfVxyXG59XHJcblxyXG5zdGFnZXMuY29tbWFuZCgnc3RhcnQnLCBzdGFydClcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHBsdWdpbihzZXJ2ZXIsIG9wdCwgZG9uZSkge1xyXG4gICAgc2VydmVyLnBvc3QoXCIvXCIgKyBFTlYuQURNSU5fQk9UX1RPS0VOLCAocmVxLCByZXMpID0+IHJlcy5yZXBseSh7IHJvb3Q6IHRydWUgfSkpXHJcbiAgICBib3RfYWRtaW4udXNlKHNlc3Npb24obW9uZ29vc2UuY29ubmVjdGlvbi5kYiwgeyBjb2xsZWN0aW9uTmFtZTogXCJzZXNzaW9uczJcIiwgc2Vzc2lvbk5hbWU6IFwic2Vzc2lvblwiIH0pKVxyXG4gICAgYm90X2FkbWluLnVzZShzdGFnZXMubWlkZGxld2FyZSgpKVxyXG4gICAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKHJlcXVpcmUoXCJAZmFzdGlmeS9taWRkaWVcIikpXHJcbiAgICBhd2FpdCBzZXJ2ZXIucmVnaXN0ZXIoYm90X2FkbWluLndlYmhvb2tDYWxsYmFjayhcIi9cIiArIEVOVi5BRE1JTl9CT1RfVE9LRU4pKVxyXG4gICAgYm90X2FkbWluLnN0YXJ0KHN0YXJ0KTtcclxuICAgIGJvdF9hZG1pbi5sYXVuY2goKVxyXG4gICAgZG9uZSgpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBib3RBZG1pblBsdWdpbiA9IGZwKHBsdWdpbik7XHJcbiJdfQ==