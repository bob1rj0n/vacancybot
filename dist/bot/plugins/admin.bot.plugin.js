"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botAdminPlugin = exports.bot_admin = void 0;
const tslib_1 = require("tslib");
const fastify_plugin_1 = tslib_1.__importDefault(require("fastify-plugin"));
const mongoose_1 = tslib_1.__importDefault(require("mongoose"));
const telegraf_1 = require("telegraf");
const telegraf_session_mongodb_1 = require("telegraf-session-mongodb");
const config_1 = require("../../common/config");
const SceneName_1 = require("../../common/constant/SceneName");
const admin_scene_1 = require("../snece/2.scenes/admin.scene");
const reject_scene_1 = require("../snece/2.scenes/reject.scene");
exports.bot_admin = new telegraf_1.Telegraf(config_1.ENV.ADMIN_BOT_TOKEN);
const stages = new telegraf_1.Scenes.Stage([
    admin_scene_1.adminScene,
    reject_scene_1.rejectVacansyScene,
]);
async function start(ctx) {
    if (ctx.from.id == 1661832397) {
        ctx.scene.enter(SceneName_1.SceneNames.ADMIN);
    }
}
stages.command('start', start);
async function plugin(server, opt, done) {
    server.post("/" + config_1.ENV.ADMIN_BOT_TOKEN, (req, res) => res.reply({ root: true }));
    exports.bot_admin.use((0, telegraf_session_mongodb_1.session)(mongoose_1.default.connection.db, { collectionName: "sessions2", sessionName: "session" }));
    exports.bot_admin.use(stages.middleware());
    // await server.register(require("@fastify/middie"))
    await server.register(exports.bot_admin.webhookCallback("/" + config_1.ENV.ADMIN_BOT_TOKEN));
    exports.bot_admin.start(start);
    exports.bot_admin.launch();
    done();
}
exports.botAdminPlugin = (0, fastify_plugin_1.default)(plugin);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uYm90LnBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ib3QvcGx1Z2lucy9hZG1pbi5ib3QucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw0RUFBZ0M7QUFDaEMsZ0VBQWdDO0FBQ2hDLHVDQUE2RDtBQUM3RCx1RUFBbUQ7QUFDbkQsZ0RBQTBDO0FBQzFDLCtEQUE2RDtBQUM3RCwrREFBMkQ7QUFDM0QsaUVBQW9FO0FBU3ZELFFBQUEsU0FBUyxHQUFHLElBQUksbUJBQVEsQ0FBWSxZQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7QUFFckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBTSxDQUFDLEtBQUssQ0FBWTtJQUN2Qyx3QkFBVTtJQUNWLGlDQUFrQjtDQUNyQixDQUFDLENBQUE7QUFFRixLQUFLLFVBQVUsS0FBSyxDQUFDLEdBQUc7SUFDcEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxVQUFVLEVBQUU7UUFDM0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsc0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtLQUNwQztBQUNMLENBQUM7QUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUU5QixLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSTtJQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxZQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDL0UsaUJBQVMsQ0FBQyxHQUFHLENBQUMsSUFBQSxrQ0FBTyxFQUFDLGtCQUFRLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUN2RyxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQTtJQUNsQyxvREFBb0Q7SUFDcEQsTUFBTSxNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsR0FBRyxZQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtJQUMzRSxpQkFBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QixpQkFBUyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ2xCLElBQUksRUFBRSxDQUFBO0FBQ1YsQ0FBQztBQUVZLFFBQUEsY0FBYyxHQUFHLElBQUEsd0JBQUUsRUFBQyxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcCBmcm9tIFwiZmFzdGlmeS1wbHVnaW5cIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IENvbnRleHQsIFNjZW5lcywgVGVsZWdyYWYsIE1hcmt1cCB9IGZyb20gXCJ0ZWxlZ3JhZlwiO1xuaW1wb3J0IHsgc2Vzc2lvbiB9IGZyb20gXCJ0ZWxlZ3JhZi1zZXNzaW9uLW1vbmdvZGJcIjtcbmltcG9ydCB7IEVOViB9IGZyb20gXCIuLi8uLi9jb21tb24vY29uZmlnXCI7XG5pbXBvcnQgeyBTY2VuZU5hbWVzIH0gZnJvbSBcIi4uLy4uL2NvbW1vbi9jb25zdGFudC9TY2VuZU5hbWVcIjtcbmltcG9ydCB7IGFkbWluU2NlbmUgfSBmcm9tIFwiLi4vc25lY2UvMi5zY2VuZXMvYWRtaW4uc2NlbmVcIjtcbmltcG9ydCB7IHJlamVjdFZhY2Fuc3lTY2VuZSB9IGZyb20gXCIuLi9zbmVjZS8yLnNjZW5lcy9yZWplY3Quc2NlbmVcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIE15Q29udGV4dCBleHRlbmRzIENvbnRleHQge1xuICAgIHNlc3Npb246IGFueTtcbiAgICBzY2VuZTogU2NlbmVzLlNjZW5lQ29udGV4dFNjZW5lPE15Q29udGV4dD47XG4gICAgS2FtaW5hOiBcIkRhc3R1cmNoaVwiXG59XG5cbmV4cG9ydCBjb25zdCBib3RfYWRtaW4gPSBuZXcgVGVsZWdyYWY8TXlDb250ZXh0PihFTlYuQURNSU5fQk9UX1RPS0VOKVxuXG5jb25zdCBzdGFnZXMgPSBuZXcgU2NlbmVzLlN0YWdlPE15Q29udGV4dD4oW1xuICAgIGFkbWluU2NlbmUsXG4gICAgcmVqZWN0VmFjYW5zeVNjZW5lLFxuXSlcblxuYXN5bmMgZnVuY3Rpb24gc3RhcnQoY3R4KSB7XG4gICAgaWYgKGN0eC5mcm9tLmlkID09IDE2NjE4MzIzOTcpIHtcbiAgICAgICAgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuQURNSU4pXG4gICAgfVxufVxuXG5zdGFnZXMuY29tbWFuZCgnc3RhcnQnLCBzdGFydClcblxuYXN5bmMgZnVuY3Rpb24gcGx1Z2luKHNlcnZlciwgb3B0LCBkb25lKSB7XG4gICAgc2VydmVyLnBvc3QoXCIvXCIgKyBFTlYuQURNSU5fQk9UX1RPS0VOLCAocmVxLCByZXMpID0+IHJlcy5yZXBseSh7IHJvb3Q6IHRydWUgfSkpXG4gICAgYm90X2FkbWluLnVzZShzZXNzaW9uKG1vbmdvb3NlLmNvbm5lY3Rpb24uZGIsIHsgY29sbGVjdGlvbk5hbWU6IFwic2Vzc2lvbnMyXCIsIHNlc3Npb25OYW1lOiBcInNlc3Npb25cIiB9KSlcbiAgICBib3RfYWRtaW4udXNlKHN0YWdlcy5taWRkbGV3YXJlKCkpXG4gICAgLy8gYXdhaXQgc2VydmVyLnJlZ2lzdGVyKHJlcXVpcmUoXCJAZmFzdGlmeS9taWRkaWVcIikpXG4gICAgYXdhaXQgc2VydmVyLnJlZ2lzdGVyKGJvdF9hZG1pbi53ZWJob29rQ2FsbGJhY2soXCIvXCIgKyBFTlYuQURNSU5fQk9UX1RPS0VOKSlcbiAgICBib3RfYWRtaW4uc3RhcnQoc3RhcnQpO1xuICAgIGJvdF9hZG1pbi5sYXVuY2goKVxuICAgIGRvbmUoKVxufVxuXG5leHBvcnQgY29uc3QgYm90QWRtaW5QbHVnaW4gPSBmcChwbHVnaW4pO1xuIl19