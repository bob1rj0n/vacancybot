"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rejectVacansyScene = void 0;
const telegraf_1 = require("telegraf");
const SceneName_1 = require("../../../common/constant/SceneName");
const user_model_1 = require("../../../common/db/model/user.model");
const bot_plugin_1 = require("../../plugins/bot.plugin");
exports.rejectVacansyScene = new telegraf_1.Scenes.BaseScene(SceneName_1.SceneNames.REJECT_VACANSY);
exports.rejectVacansyScene.enter(async (ctx) => {
    const Msg = ctx.session.rejectedMsg;
    const user = (await user_model_1.UserModel.find({ userId: Msg.userId })).shift();
    console.log("reject scene session : ", ctx.session);
    await ctx.reply(`Vakansiya bekor qilindi sababini kiriting!\nFoydalanuvchi tili : ${user.language}`, {
        reply_to_message_id: Msg.message_id
    });
});
exports.rejectVacansyScene.on('text', async (ctx) => {
    const sabab = ctx.message.text;
    const Msg = ctx.session.rejectedMsg;
    const user = (await user_model_1.UserModel.find({ userId: Msg.userId })).shift();
    await bot_plugin_1.bot.telegram.sendMessage(Msg.userId, (user.language == 'uz'
        ? `Vakansiyangiz bekor qilindi!\nSababi : ${sabab}`
        : user.language == 'ru'
            ? `Ваша вакансия была отменена!\nПричина: ${sabab}`
            : ` Your vacancy has been cancelled!\nReason : ${sabab}`), {
        reply_to_message_id: Msg.userMsgId
    });
    await ctx.reply("Xabar foydalanuvchiga yuborildi!");
    await ctx.scene.enter(SceneName_1.SceneNames.ADMIN);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVqZWN0LnNjZW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2JvdC9zbmVjZS8yLnNjZW5lcy9yZWplY3Quc2NlbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQWtDO0FBQ2xDLGtFQUFnRTtBQUNoRSxvRUFBZ0U7QUFFaEUseURBQTBEO0FBRTdDLFFBQUEsa0JBQWtCLEdBQUcsSUFBSSxpQkFBTSxDQUFDLFNBQVMsQ0FBWSxzQkFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTdGLDBCQUFrQixDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFDcEMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLHNCQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFcEQsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUNYLG9FQUFvRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQ25GO1FBQ0ksbUJBQW1CLEVBQUUsR0FBRyxDQUFDLFVBQVU7S0FDdEMsQ0FDSixDQUFDO0FBQ04sQ0FBQyxDQUFDLENBQUE7QUFFRiwwQkFBa0IsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUN4QyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUMvQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUNwQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sc0JBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwRSxNQUFNLGdCQUFHLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDMUIsR0FBRyxDQUFDLE1BQU0sRUFDVixDQUNJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSTtRQUNqQixDQUFDLENBQUMsMENBQTBDLEtBQUssRUFBRTtRQUNuRCxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJO1lBQ25CLENBQUMsQ0FBQywwQ0FBMEMsS0FBSyxFQUFFO1lBQ25ELENBQUMsQ0FBQywrQ0FBK0MsS0FBSyxFQUFFLENBQ25FLEVBQ0Q7UUFDSSxtQkFBbUIsRUFBRSxHQUFHLENBQUMsU0FBUztLQUNyQyxDQUNKLENBQUE7SUFDRCxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtJQUNuRCxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFVLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDM0MsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTY2VuZXMgfSBmcm9tIFwidGVsZWdyYWZcIjtcclxuaW1wb3J0IHsgU2NlbmVOYW1lcyB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vY29uc3RhbnQvU2NlbmVOYW1lXCI7XHJcbmltcG9ydCB7IFVzZXJNb2RlbCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZGIvbW9kZWwvdXNlci5tb2RlbFwiO1xyXG5pbXBvcnQgeyBWYWNhbmN5TW9kZWwgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2RiL21vZGVsL3ZhY2FuY3kubW9kZWxcIjtcclxuaW1wb3J0IHsgYm90LCBNeUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9ib3QucGx1Z2luXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcmVqZWN0VmFjYW5zeVNjZW5lID0gbmV3IFNjZW5lcy5CYXNlU2NlbmU8TXlDb250ZXh0PihTY2VuZU5hbWVzLlJFSkVDVF9WQUNBTlNZKTtcclxuXHJcbnJlamVjdFZhY2Fuc3lTY2VuZS5lbnRlcihhc3luYyAoY3R4KSA9PiB7XHJcbiAgICBjb25zdCBNc2cgPSBjdHguc2Vzc2lvbi5yZWplY3RlZE1zZztcclxuICAgIGNvbnN0IHVzZXIgPSAoYXdhaXQgVXNlck1vZGVsLmZpbmQoeyB1c2VySWQ6IE1zZy51c2VySWQgfSkpLnNoaWZ0KCk7XHJcblxyXG4gICAgY29uc29sZS5sb2coXCJyZWplY3Qgc2NlbmUgc2Vzc2lvbiA6IFwiLCBjdHguc2Vzc2lvbik7XHJcblxyXG4gICAgYXdhaXQgY3R4LnJlcGx5KFxyXG4gICAgICAgIGBWYWthbnNpeWEgYmVrb3IgcWlsaW5kaSBzYWJhYmluaSBraXJpdGluZyFcXG5Gb3lkYWxhbnV2Y2hpIHRpbGkgOiAke3VzZXIubGFuZ3VhZ2V9YCxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlcGx5X3RvX21lc3NhZ2VfaWQ6IE1zZy5tZXNzYWdlX2lkXHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxufSlcclxuXHJcbnJlamVjdFZhY2Fuc3lTY2VuZS5vbigndGV4dCcsIGFzeW5jIChjdHgpID0+IHtcclxuICAgIGNvbnN0IHNhYmFiID0gY3R4Lm1lc3NhZ2UudGV4dDtcclxuICAgIGNvbnN0IE1zZyA9IGN0eC5zZXNzaW9uLnJlamVjdGVkTXNnO1xyXG4gICAgY29uc3QgdXNlciA9IChhd2FpdCBVc2VyTW9kZWwuZmluZCh7IHVzZXJJZDogTXNnLnVzZXJJZCB9KSkuc2hpZnQoKTtcclxuICAgIGF3YWl0IGJvdC50ZWxlZ3JhbS5zZW5kTWVzc2FnZShcclxuICAgICAgICBNc2cudXNlcklkLFxyXG4gICAgICAgIChcclxuICAgICAgICAgICAgdXNlci5sYW5ndWFnZSA9PSAndXonXHJcbiAgICAgICAgICAgICAgICA/IGBWYWthbnNpeWFuZ2l6IGJla29yIHFpbGluZGkhXFxuU2FiYWJpIDogJHtzYWJhYn1gXHJcbiAgICAgICAgICAgICAgICA6IHVzZXIubGFuZ3VhZ2UgPT0gJ3J1J1xyXG4gICAgICAgICAgICAgICAgICAgID8gYNCS0LDRiNCwINCy0LDQutCw0L3RgdC40Y8g0LHRi9C70LAg0L7RgtC80LXQvdC10L3QsCFcXG7Qn9GA0LjRh9C40L3QsDogJHtzYWJhYn1gXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgIFlvdXIgdmFjYW5jeSBoYXMgYmVlbiBjYW5jZWxsZWQhXFxuUmVhc29uIDogJHtzYWJhYn1gXHJcbiAgICAgICAgKSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHJlcGx5X3RvX21lc3NhZ2VfaWQ6IE1zZy51c2VyTXNnSWRcclxuICAgICAgICB9XHJcbiAgICApXHJcbiAgICBhd2FpdCBjdHgucmVwbHkoXCJYYWJhciBmb3lkYWxhbnV2Y2hpZ2EgeXVib3JpbGRpIVwiKVxyXG4gICAgYXdhaXQgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuQURNSU4pXHJcbn0pXHJcbiJdfQ==