"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adminScene = void 0;
const telegraf_1 = require("telegraf");
const messages_1 = require("../../../common/constant/messages");
const SceneName_1 = require("../../../common/constant/SceneName");
const findHrVacansy_model_1 = require("../../../common/db/model/findHrVacansy.model");
const user_model_1 = require("../../../common/db/model/user.model");
const vacancy_model_1 = require("../../../common/db/model/vacancy.model");
const functions_1 = require("../../../common/service/functions");
const bot_plugin_1 = require("../../plugins/bot.plugin");
exports.adminScene = new telegraf_1.Scenes.BaseScene(SceneName_1.SceneNames.ADMIN);
exports.adminScene.enter(async (ctx) => {
    ctx.reply(`${ctx.from.first_name} admin bo'limiga xush kelibsiz!`);
});
exports.adminScene.action('✅', async (ctx) => {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    let Msg, msg;
    const a = (await vacancy_model_1.VacancyModel.find({ messageId: ctx.callbackQuery.message.message_id })).shift();
    const b = (await findHrVacansy_model_1.FindHrVacansyModel.find({ messageId: ctx.callbackQuery.message.message_id })).shift();
    Msg = a ? a : b;
    const user = (await user_model_1.UserModel.find({ userId: Msg.userId })).shift();
    msg = await (0, functions_1.getVacansyForChannel)(Msg);
    const vacCahn = await ctx.telegram.sendPhoto("@bekobod_job", 
    // "@IT_vacansy",
    {
        source: Msg.img
    }, {
        caption: msg,
        parse_mode: "HTML"
    });
    await bot_plugin_1.bot.telegram.sendMessage(Msg.userId, messages_1.Messages.PostedByAdmin[user.language], {
        parse_mode: "HTML",
        reply_to_message_id: Msg.userMsgId,
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: "Link", url: `https://t.me/bekobod_job/${vacCahn.message_id}`
                    }
                ]
            ]
        }
    });
    await ctx.replyWithHTML(`Vakansiya kanalga joylandi!`);
});
exports.adminScene.action('❌', async (ctx) => {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    const Msg = (await vacancy_model_1.VacancyModel.find({ messageId: ctx.callbackQuery.message.message_id })).shift();
    ctx.session.rejectedMsg = Msg;
    await ctx.scene.enter(SceneName_1.SceneNames.REJECT_VACANSY);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRtaW4uc2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYm90L3NuZWNlLzIuc2NlbmVzL2FkbWluLnNjZW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUEwQztBQUMxQyxnRUFBNkQ7QUFDN0Qsa0VBQWdFO0FBQ2hFLHNGQUFrRjtBQUNsRixvRUFBZ0U7QUFDaEUsMEVBQXNFO0FBQ3RFLGlFQUFxRjtBQUNyRix5REFBMEQ7QUFHN0MsUUFBQSxVQUFVLEdBQUcsSUFBSSxpQkFBTSxDQUFDLFNBQVMsQ0FBWSxzQkFBVSxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBRTNFLGtCQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMzQixHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLGlDQUFpQyxDQUFDLENBQUE7QUFDdEUsQ0FBQyxDQUFDLENBQUE7QUFDRixrQkFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFO0lBQy9CLE1BQU0sR0FBRyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFekQsSUFBSSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ2IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLDRCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNqRyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sd0NBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2RyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQixNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sc0JBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNwRSxHQUFHLEdBQUcsTUFBTSxJQUFBLGdDQUFvQixFQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQ3hDLGNBQWM7SUFDZCxpQkFBaUI7SUFDakI7UUFDSSxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUc7S0FDbEIsRUFDRDtRQUNJLE9BQU8sRUFBRSxHQUFHO1FBQ1osVUFBVSxFQUFFLE1BQU07S0FDckIsQ0FDSixDQUFDO0lBRUYsTUFBTSxnQkFBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQzFCLEdBQUcsQ0FBQyxNQUFNLEVBQ1YsbUJBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUNyQztRQUNJLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxTQUFTO1FBQ2xDLFlBQVksRUFBRTtZQUNWLGVBQWUsRUFBRTtnQkFDYjtvQkFDSTt3QkFDSSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSw0QkFBNEIsT0FBTyxDQUFDLFVBQVUsRUFBRTtxQkFDdEU7aUJBQ0o7YUFDSjtTQUNKO0tBQ0osQ0FDSixDQUFBO0lBQ0QsTUFBTSxHQUFHLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFDMUQsQ0FBQyxDQUFDLENBQUE7QUFHRixrQkFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLEdBQUcsRUFBQyxFQUFFO0lBQy9CLE1BQU0sR0FBRyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsZUFBZSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFFekQsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLDRCQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVuRyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUM7SUFDOUIsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxzQkFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFya3VwLCBTY2VuZXMgfSBmcm9tIFwidGVsZWdyYWZcIjtcclxuaW1wb3J0IHsgTWVzc2FnZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50L21lc3NhZ2VzXCI7XHJcbmltcG9ydCB7IFNjZW5lTmFtZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50L1NjZW5lTmFtZVwiO1xyXG5pbXBvcnQgeyBGaW5kSHJWYWNhbnN5TW9kZWwgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2RiL21vZGVsL2ZpbmRIclZhY2Fuc3kubW9kZWxcIjtcclxuaW1wb3J0IHsgVXNlck1vZGVsIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9kYi9tb2RlbC91c2VyLm1vZGVsXCI7XHJcbmltcG9ydCB7IFZhY2FuY3lNb2RlbCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZGIvbW9kZWwvdmFjYW5jeS5tb2RlbFwiO1xyXG5pbXBvcnQgeyBnZXRWYWNhbmN5LCBnZXRWYWNhbnN5Rm9yQ2hhbm5lbCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vc2VydmljZS9mdW5jdGlvbnNcIjtcclxuaW1wb3J0IHsgYm90LCBNeUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9ib3QucGx1Z2luXCI7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGFkbWluU2NlbmUgPSBuZXcgU2NlbmVzLkJhc2VTY2VuZTxNeUNvbnRleHQ+KFNjZW5lTmFtZXMuQURNSU4pXHJcblxyXG5hZG1pblNjZW5lLmVudGVyKGFzeW5jIChjdHgpID0+IHtcclxuICAgIGN0eC5yZXBseShgJHtjdHguZnJvbS5maXJzdF9uYW1lfSBhZG1pbiBibydsaW1pZ2EgeHVzaCBrZWxpYnNpeiFgKVxyXG59KVxyXG5hZG1pblNjZW5lLmFjdGlvbign4pyFJywgYXN5bmMgY3R4ID0+IHtcclxuICAgIGF3YWl0IGN0eC5lZGl0TWVzc2FnZVJlcGx5TWFya3VwKHsgaW5saW5lX2tleWJvYXJkOiBbXSB9KVxyXG5cclxuICAgIGxldCBNc2csIG1zZztcclxuICAgIGNvbnN0IGEgPSAoYXdhaXQgVmFjYW5jeU1vZGVsLmZpbmQoeyBtZXNzYWdlSWQ6IGN0eC5jYWxsYmFja1F1ZXJ5Lm1lc3NhZ2UubWVzc2FnZV9pZCB9KSkuc2hpZnQoKTtcclxuICAgIGNvbnN0IGIgPSAoYXdhaXQgRmluZEhyVmFjYW5zeU1vZGVsLmZpbmQoeyBtZXNzYWdlSWQ6IGN0eC5jYWxsYmFja1F1ZXJ5Lm1lc3NhZ2UubWVzc2FnZV9pZCB9KSkuc2hpZnQoKTtcclxuICAgIE1zZyA9IGEgPyBhIDogYjtcclxuICAgIGNvbnN0IHVzZXIgPSAoYXdhaXQgVXNlck1vZGVsLmZpbmQoeyB1c2VySWQ6IE1zZy51c2VySWQgfSkpLnNoaWZ0KCk7XHJcbiAgICBtc2cgPSBhd2FpdCBnZXRWYWNhbnN5Rm9yQ2hhbm5lbChNc2cpO1xyXG4gICAgY29uc3QgdmFjQ2FobiA9IGF3YWl0IGN0eC50ZWxlZ3JhbS5zZW5kUGhvdG8oXHJcbiAgICAgICAgXCJAYmVrb2JvZF9qb2JcIixcclxuICAgICAgICAvLyBcIkBJVF92YWNhbnN5XCIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBzb3VyY2U6IE1zZy5pbWdcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgY2FwdGlvbjogbXNnLFxyXG4gICAgICAgICAgICBwYXJzZV9tb2RlOiBcIkhUTUxcIlxyXG4gICAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgYXdhaXQgYm90LnRlbGVncmFtLnNlbmRNZXNzYWdlKFxyXG4gICAgICAgIE1zZy51c2VySWQsXHJcbiAgICAgICAgTWVzc2FnZXMuUG9zdGVkQnlBZG1pblt1c2VyLmxhbmd1YWdlXSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHBhcnNlX21vZGU6IFwiSFRNTFwiLFxyXG4gICAgICAgICAgICByZXBseV90b19tZXNzYWdlX2lkOiBNc2cudXNlck1zZ0lkLFxyXG4gICAgICAgICAgICByZXBseV9tYXJrdXA6IHtcclxuICAgICAgICAgICAgICAgIGlubGluZV9rZXlib2FyZDogW1xyXG4gICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJMaW5rXCIsIHVybDogYGh0dHBzOi8vdC5tZS9iZWtvYm9kX2pvYi8ke3ZhY0NhaG4ubWVzc2FnZV9pZH1gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICApXHJcbiAgICBhd2FpdCBjdHgucmVwbHlXaXRoSFRNTChgVmFrYW5zaXlhIGthbmFsZ2Egam95bGFuZGkhYClcclxufSlcclxuXHJcblxyXG5hZG1pblNjZW5lLmFjdGlvbign4p2MJywgYXN5bmMgY3R4ID0+IHtcclxuICAgIGF3YWl0IGN0eC5lZGl0TWVzc2FnZVJlcGx5TWFya3VwKHsgaW5saW5lX2tleWJvYXJkOiBbXSB9KVxyXG5cclxuICAgIGNvbnN0IE1zZyA9IChhd2FpdCBWYWNhbmN5TW9kZWwuZmluZCh7IG1lc3NhZ2VJZDogY3R4LmNhbGxiYWNrUXVlcnkubWVzc2FnZS5tZXNzYWdlX2lkIH0pKS5zaGlmdCgpO1xyXG5cclxuICAgIGN0eC5zZXNzaW9uLnJlamVjdGVkTXNnID0gTXNnO1xyXG4gICAgYXdhaXQgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuUkVKRUNUX1ZBQ0FOU1kpO1xyXG59KVxyXG4iXX0=