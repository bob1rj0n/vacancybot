"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendToAdminScene = void 0;
const telegraf_1 = require("telegraf");
const messages_1 = require("../../../common/constant/messages");
const SceneName_1 = require("../../../common/constant/SceneName");
const findHrVacansy_model_1 = require("../../../common/db/model/findHrVacansy.model");
const vacancy_model_1 = require("../../../common/db/model/vacancy.model");
const functions_1 = require("../../../common/service/functions");
const admin_bot_plugin_1 = require("../../plugins/admin.bot.plugin");
exports.sendToAdminScene = new telegraf_1.Scenes.BaseScene(SceneName_1.SceneNames.SEND_TO_ADMIN);
exports.sendToAdminScene.enter(async (ctx) => {
    const lang = ctx.session.language;
    let buttons = [];
    buttons.push([telegraf_1.Markup.button.callback("✅ Ha", "✅"), telegraf_1.Markup.button.callback("❌ Yo'q", "❌")]);
    await ctx.replyWithHTML(messages_1.Messages.CheckAndSendVacancy[lang], telegraf_1.Markup.removeKeyboard());
    let msg = await (0, functions_1.getVacancy)(ctx.session);
    ctx.session.msg = msg;
    const uMsg = await ctx.replyWithPhoto({ source: "./uploads/image.jpg" }, {
        caption: msg,
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: buttons
        }
    });
    ctx.session.userMsgId = uMsg.message_id;
    ctx.session.img = "./uploads/image.jpg";
    console.log("send vacancy scene : ", ctx.session);
});
exports.sendToAdminScene.action(/✅/, async (ctx) => {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    const lang = ctx.session.language;
    let buttons = [];
    buttons.push([telegraf_1.Markup.button.callback("✅ Ha", "✅"), telegraf_1.Markup.button.callback("❌ Yo'q", "❌")]);
    let vac;
    if (ctx.session.vacancyType == 'findWork') {
        let data = {
            userId: ctx.from.id,
            direction: ctx.session.direction,
            name: ctx.session.name,
            age: ctx.session.age,
            technology: ctx.session.technology,
            tgUsername: ctx.from.username,
            phone: ctx.session.phone,
            place: ctx.session.place,
            price: ctx.session.price,
            profession: ctx.session.profession,
            timeToCall: ctx.session.timeToCall,
            goal: ctx.session.goal,
            userMsgId: ctx.session.userMsgId,
            img: ctx.session.img,
            hashtegs: ctx.session.hashtegs,
            vacancyType: ctx.session.vacancyType
        };
        vac = await vacancy_model_1.VacancyModel.create(data);
    }
    if (ctx.session.vacancyType == 'findHr') {
        let data = {
            userId: ctx.from.id,
            direction: ctx.session.direction,
            officeName: ctx.session.officeName,
            technology: ctx.session.technology_2,
            responsible: ctx.session.responsible,
            place: ctx.session.place_2,
            price: ctx.session.price_2,
            tgUsername: ctx.from.username ? ctx.from.username : null,
            timeOfWork: ctx.session.timeOfWork,
            timeToCall: ctx.session.timeToCall_2,
            userMsgId: ctx.session.userMsgId,
            addition: ctx.session.addition,
            img: ctx.session.img,
            hashtegs: ctx.session.hashtegs,
            link: ctx.session.link,
            vacancyType: ctx.session.vacancyType,
        };
        vac = await findHrVacansy_model_1.FindHrVacansyModel.create(data);
    }
    const vacInAdmin = await admin_bot_plugin_1.bot_admin.telegram.sendPhoto(
    // 651985244,
    1661832397, {
        source: ctx.session.img
    }, {
        caption: `✅ Malumotlarni tasdiqlang\n${ctx.session.msg}`,
        parse_mode: "HTML",
        reply_markup: {
            inline_keyboard: buttons
        }
    });
    ctx.session.vacancyType == 'findWork'
        ? await vacancy_model_1.VacancyModel.updateOne({ _id: vac._id }, { messageId: vacInAdmin.message_id })
        : await findHrVacansy_model_1.FindHrVacansyModel.updateOne({ _id: vac._id }, { messageId: vacInAdmin.message_id });
    await ctx.replyWithHTML(messages_1.Messages.SendToAdmin[lang]);
    await ctx.scene.enter(SceneName_1.SceneNames.MAIN);
});
exports.sendToAdminScene.action(/❌/, async (ctx) => {
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
    const lang = ctx.session.language;
    await ctx.replyWithHTML(messages_1.Messages.Canceled[lang]);
    await ctx.scene.enter(SceneName_1.SceneNames.MAIN);
});
//# sourceMappingURL=data:application/json;base64,