"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeLanguageScene = void 0;
const telegraf_1 = require("telegraf");
const messages_1 = require("../../../common/constant/messages");
const SceneName_1 = require("../../../common/constant/SceneName");
const user_model_1 = require("../../../common/db/model/user.model");
exports.changeLanguageScene = new telegraf_1.Scenes.BaseScene(SceneName_1.SceneNames.CHANGE_LANGUAGE);
exports.changeLanguageScene.enter(async (ctx) => {
    const lang = ctx.session.language;
    const buttons = [];
    buttons.push([telegraf_1.Markup.button.callback("🇺🇿 Uzbek", "🇺🇿"), telegraf_1.Markup.button.callback("🇺🇸 English", "🇺🇸"), telegraf_1.Markup.button.callback("🇷🇺 Русский", "🇷🇺")]);
    await ctx.reply(messages_1.Messages.Language[lang], telegraf_1.Markup.keyboard(buttons).resize(true));
});
exports.changeLanguageScene.hears(/🇺🇿/, async (ctx) => {
    ctx.session.language = "uz";
    await ctx.deleteMessage(ctx.message?.message_id);
    await user_model_1.UserModel.updateOne({ userId: ctx.from.id }, { language: "uz" });
    await ctx.scene.enter(SceneName_1.SceneNames.MAIN);
});
exports.changeLanguageScene.hears(/🇺🇸/, async (ctx) => {
    ctx.session.language = "en";
    await ctx.deleteMessage(ctx.message?.message_id);
    await user_model_1.UserModel.updateOne({ userId: ctx.from.id }, { language: "en" });
    await ctx.scene.enter(SceneName_1.SceneNames.MAIN);
});
exports.changeLanguageScene.hears(/🇷🇺/, async (ctx) => {
    ctx.session.language = "ru";
    await ctx.deleteMessage(ctx.message?.message_id);
    await user_model_1.UserModel.updateOne({ userId: ctx.from.id }, { language: "ru" });
    await ctx.scene.enter(SceneName_1.SceneNames.MAIN);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlTGFuZ3VhZ2Uuc2NlbmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYm90L3NuZWNlLzAuc2NlbmVzL2NoYW5nZUxhbmd1YWdlLnNjZW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHVDQUEwQztBQUMxQyxnRUFBNkQ7QUFDN0Qsa0VBQWdFO0FBQ2hFLG9FQUFnRTtBQUluRCxRQUFBLG1CQUFtQixHQUFHLElBQUksaUJBQU0sQ0FBQyxTQUFTLENBQVksc0JBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUUvRiwyQkFBbUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ2xDLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQTtJQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsRUFBRSxpQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUFFLGlCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVKLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxpQkFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNwRixDQUFDLENBQUMsQ0FBQTtBQUdGLDJCQUFtQixDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQzVDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQTtJQUMzQixNQUFNLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUVoRCxNQUFNLHNCQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUV0RSxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDMUMsQ0FBQyxDQUFDLENBQUE7QUFFRiwyQkFBbUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUM1QyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUE7SUFDM0IsTUFBTSxHQUFHLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUE7SUFFaEQsTUFBTSxzQkFBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFFdEUsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxzQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzFDLENBQUMsQ0FBQyxDQUFBO0FBRUYsMkJBQW1CLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDNUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFBO0lBQzNCLE1BQU0sR0FBRyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBRWhELE1BQU0sc0JBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRXRFLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsc0JBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUMxQyxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmt1cCwgU2NlbmVzIH0gZnJvbSBcInRlbGVncmFmXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VzIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb25zdGFudC9tZXNzYWdlc1wiO1xyXG5pbXBvcnQgeyBTY2VuZU5hbWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb25zdGFudC9TY2VuZU5hbWVcIjtcclxuaW1wb3J0IHsgVXNlck1vZGVsIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9kYi9tb2RlbC91c2VyLm1vZGVsXCI7XHJcbmltcG9ydCB7IGFkZFRleHRPbkltYWdlIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9zZXJ2aWNlL2Z1bmN0aW9uc1wiO1xyXG5pbXBvcnQgeyBNeUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vcGx1Z2lucy9ib3QucGx1Z2luXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY2hhbmdlTGFuZ3VhZ2VTY2VuZSA9IG5ldyBTY2VuZXMuQmFzZVNjZW5lPE15Q29udGV4dD4oU2NlbmVOYW1lcy5DSEFOR0VfTEFOR1VBR0UpO1xyXG5cclxuY2hhbmdlTGFuZ3VhZ2VTY2VuZS5lbnRlcihhc3luYyAoY3R4KSA9PiB7XHJcbiAgICBjb25zdCBsYW5nID0gY3R4LnNlc3Npb24ubGFuZ3VhZ2U7XHJcbiAgICBjb25zdCBidXR0b25zID0gW11cclxuICAgIGJ1dHRvbnMucHVzaChbTWFya3VwLmJ1dHRvbi5jYWxsYmFjayhcIvCfh7rwn4e/IFV6YmVrXCIsIFwi8J+HuvCfh79cIiksIE1hcmt1cC5idXR0b24uY2FsbGJhY2soXCLwn4e68J+HuCBFbmdsaXNoXCIsIFwi8J+HuvCfh7hcIiksIE1hcmt1cC5idXR0b24uY2FsbGJhY2soXCLwn4e38J+HuiDQoNGD0YHRgdC60LjQuVwiLCBcIvCfh7fwn4e6XCIpXSlcclxuICAgIGF3YWl0IGN0eC5yZXBseShNZXNzYWdlcy5MYW5ndWFnZVtsYW5nXSwgTWFya3VwLmtleWJvYXJkKGJ1dHRvbnMpLnJlc2l6ZSh0cnVlKSk7XHJcbn0pXHJcblxyXG5cclxuY2hhbmdlTGFuZ3VhZ2VTY2VuZS5oZWFycygv8J+HuvCfh78vLCBhc3luYyAoY3R4KSA9PiB7XHJcbiAgICBjdHguc2Vzc2lvbi5sYW5ndWFnZSA9IFwidXpcIlxyXG4gICAgYXdhaXQgY3R4LmRlbGV0ZU1lc3NhZ2UoY3R4Lm1lc3NhZ2U/Lm1lc3NhZ2VfaWQpXHJcblxyXG4gICAgYXdhaXQgVXNlck1vZGVsLnVwZGF0ZU9uZSh7IHVzZXJJZDogY3R4LmZyb20uaWQgfSwgeyBsYW5ndWFnZTogXCJ1elwiIH0pXHJcblxyXG4gICAgYXdhaXQgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuTUFJTilcclxufSlcclxuXHJcbmNoYW5nZUxhbmd1YWdlU2NlbmUuaGVhcnMoL/Cfh7rwn4e4LywgYXN5bmMgKGN0eCkgPT4ge1xyXG4gICAgY3R4LnNlc3Npb24ubGFuZ3VhZ2UgPSBcImVuXCJcclxuICAgIGF3YWl0IGN0eC5kZWxldGVNZXNzYWdlKGN0eC5tZXNzYWdlPy5tZXNzYWdlX2lkKVxyXG5cclxuICAgIGF3YWl0IFVzZXJNb2RlbC51cGRhdGVPbmUoeyB1c2VySWQ6IGN0eC5mcm9tLmlkIH0sIHsgbGFuZ3VhZ2U6IFwiZW5cIiB9KVxyXG5cclxuICAgIGF3YWl0IGN0eC5zY2VuZS5lbnRlcihTY2VuZU5hbWVzLk1BSU4pXHJcbn0pXHJcblxyXG5jaGFuZ2VMYW5ndWFnZVNjZW5lLmhlYXJzKC/wn4e38J+Hui8sIGFzeW5jIChjdHgpID0+IHtcclxuICAgIGN0eC5zZXNzaW9uLmxhbmd1YWdlID0gXCJydVwiXHJcbiAgICBhd2FpdCBjdHguZGVsZXRlTWVzc2FnZShjdHgubWVzc2FnZT8ubWVzc2FnZV9pZClcclxuXHJcbiAgICBhd2FpdCBVc2VyTW9kZWwudXBkYXRlT25lKHsgdXNlcklkOiBjdHguZnJvbS5pZCB9LCB7IGxhbmd1YWdlOiBcInJ1XCIgfSlcclxuXHJcbiAgICBhd2FpdCBjdHguc2NlbmUuZW50ZXIoU2NlbmVOYW1lcy5NQUlOKVxyXG59KVxyXG4iXX0=