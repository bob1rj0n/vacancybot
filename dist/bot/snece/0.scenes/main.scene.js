"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mainScene = void 0;
const telegraf_1 = require("telegraf");
const messages_1 = require("../../../common/constant/messages");
const SceneName_1 = require("../../../common/constant/SceneName");
const user_model_1 = require("../../../common/db/model/user.model");
exports.mainScene = new telegraf_1.Scenes.BaseScene(SceneName_1.SceneNames.MAIN);
exports.mainScene.enter(async (ctx) => {
    const user = await user_model_1.UserModel.findOne({ userId: ctx.from.id });
    if (user) {
        await user_model_1.UserModel.updateOne({
            userId: user.userId
        }, {
            $set: {
                userId: ctx.from.id,
                firstName: ctx.from.first_name,
                userName: ctx.from.username,
                language: ctx.session.language
            }
        });
    }
    const language = user.language;
    const buttons = [];
    buttons.push([telegraf_1.Markup.button.callback(messages_1.Buttons.Main[language]["📉"], "📉")]);
    buttons.push([telegraf_1.Markup.button.callback(messages_1.Buttons.Main[language]["📝"], "📝"), telegraf_1.Markup.button.callback(messages_1.Buttons.Main[language]["🔄"], "🔄")]);
    // buttons.push([Markup.button.callback(Buttons.Main[language]["📃"], "📃")])
    await ctx.replyWithHTML(messages_1.Messages.Meny[language], telegraf_1.Markup.keyboard(buttons).resize(true));
});
exports.mainScene.hears(/🔄/, async (ctx) => {
    await ctx.scene.enter(SceneName_1.SceneNames.CHANGE_LANGUAGE);
});
exports.mainScene.hears(/📉/, async (ctx) => {
    await ctx.scene.enter(SceneName_1.SceneNames.CHOOSE_VACANSY);
});
// mainScene.hears(/📃/, async (ctx) => {
//     await ctx.scene.enter(SceneNames.MY_VACANCY)
// })
exports.mainScene.hears(/📝/, async (ctx) => {
    await ctx.scene.enter(SceneName_1.SceneNames.PRIVACY);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5zY2VuZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ib3Qvc25lY2UvMC5zY2VuZXMvbWFpbi5zY2VuZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBMEM7QUFDMUMsZ0VBQXNFO0FBQ3RFLGtFQUFnRTtBQUNoRSxvRUFBZ0U7QUFHbkQsUUFBQSxTQUFTLEdBQUcsSUFBSSxpQkFBTSxDQUFDLFNBQVMsQ0FBWSxzQkFBVSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBRXpFLGlCQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMxQixNQUFNLElBQUksR0FBRyxNQUFNLHNCQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUM3RCxJQUFJLElBQUksRUFBRTtRQUNOLE1BQU0sc0JBQVMsQ0FBQyxTQUFTLENBQ3JCO1lBQ0ksTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3RCLEVBQ0Q7WUFDSSxJQUFJLEVBQUU7Z0JBQ0YsTUFBTSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDbkIsU0FBUyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVTtnQkFDOUIsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUTtnQkFDM0IsUUFBUSxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUTthQUNqQztTQUNKLENBQ0osQ0FBQTtLQUNKO0lBQ0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMvQixNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUE7SUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDMUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLGlCQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxpQkFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsa0JBQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RJLDZFQUE2RTtJQUU3RSxNQUFNLEdBQUcsQ0FBQyxhQUFhLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDM0YsQ0FBQyxDQUFDLENBQUE7QUFFRixpQkFBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ2hDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsc0JBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUNyRCxDQUFDLENBQUMsQ0FBQTtBQUVGLGlCQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDaEMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxzQkFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0FBQ3BELENBQUMsQ0FBQyxDQUFBO0FBQ0YseUNBQXlDO0FBQ3pDLG1EQUFtRDtBQUNuRCxLQUFLO0FBQ0wsaUJBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUNoQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHNCQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDN0MsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrdXAsIFNjZW5lcyB9IGZyb20gXCJ0ZWxlZ3JhZlwiO1xuaW1wb3J0IHsgQnV0dG9ucywgTWVzc2FnZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29tbW9uL2NvbnN0YW50L21lc3NhZ2VzXCI7XG5pbXBvcnQgeyBTY2VuZU5hbWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NvbW1vbi9jb25zdGFudC9TY2VuZU5hbWVcIjtcbmltcG9ydCB7IFVzZXJNb2RlbCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vZGIvbW9kZWwvdXNlci5tb2RlbFwiO1xuaW1wb3J0IHsgTXlDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3BsdWdpbnMvYm90LnBsdWdpblwiO1xuXG5leHBvcnQgY29uc3QgbWFpblNjZW5lID0gbmV3IFNjZW5lcy5CYXNlU2NlbmU8TXlDb250ZXh0PihTY2VuZU5hbWVzLk1BSU4pXG5cbm1haW5TY2VuZS5lbnRlcihhc3luYyAoY3R4KSA9PiB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXJNb2RlbC5maW5kT25lKHsgdXNlcklkOiBjdHguZnJvbS5pZCB9KVxuICAgIGlmICh1c2VyKSB7XG4gICAgICAgIGF3YWl0IFVzZXJNb2RlbC51cGRhdGVPbmUoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdXNlcklkOiB1c2VyLnVzZXJJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAkc2V0OiB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZDogY3R4LmZyb20uaWQsXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogY3R4LmZyb20uZmlyc3RfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdXNlck5hbWU6IGN0eC5mcm9tLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZTogY3R4LnNlc3Npb24ubGFuZ3VhZ2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB1c2VyLmxhbmd1YWdlO1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBbXVxuICAgIGJ1dHRvbnMucHVzaChbTWFya3VwLmJ1dHRvbi5jYWxsYmFjayhCdXR0b25zLk1haW5bbGFuZ3VhZ2VdW1wi8J+TiVwiXSwgXCLwn5OJXCIpXSlcbiAgICBidXR0b25zLnB1c2goW01hcmt1cC5idXR0b24uY2FsbGJhY2soQnV0dG9ucy5NYWluW2xhbmd1YWdlXVtcIvCfk51cIl0sIFwi8J+TnVwiKSwgTWFya3VwLmJ1dHRvbi5jYWxsYmFjayhCdXR0b25zLk1haW5bbGFuZ3VhZ2VdW1wi8J+UhFwiXSwgXCLwn5SEXCIpXSlcbiAgICAvLyBidXR0b25zLnB1c2goW01hcmt1cC5idXR0b24uY2FsbGJhY2soQnV0dG9ucy5NYWluW2xhbmd1YWdlXVtcIvCfk4NcIl0sIFwi8J+Tg1wiKV0pXG5cbiAgICBhd2FpdCBjdHgucmVwbHlXaXRoSFRNTChNZXNzYWdlcy5NZW55W2xhbmd1YWdlXSwgTWFya3VwLmtleWJvYXJkKGJ1dHRvbnMpLnJlc2l6ZSh0cnVlKSlcbn0pXG5cbm1haW5TY2VuZS5oZWFycygv8J+UhC8sIGFzeW5jIChjdHgpID0+IHtcbiAgICBhd2FpdCBjdHguc2NlbmUuZW50ZXIoU2NlbmVOYW1lcy5DSEFOR0VfTEFOR1VBR0UpXG59KVxuXG5tYWluU2NlbmUuaGVhcnMoL/Cfk4kvLCBhc3luYyAoY3R4KSA9PiB7XG4gICAgYXdhaXQgY3R4LnNjZW5lLmVudGVyKFNjZW5lTmFtZXMuQ0hPT1NFX1ZBQ0FOU1kpXG59KVxuLy8gbWFpblNjZW5lLmhlYXJzKC/wn5ODLywgYXN5bmMgKGN0eCkgPT4ge1xuLy8gICAgIGF3YWl0IGN0eC5zY2VuZS5lbnRlcihTY2VuZU5hbWVzLk1ZX1ZBQ0FOQ1kpXG4vLyB9KVxubWFpblNjZW5lLmhlYXJzKC/wn5OdLywgYXN5bmMgKGN0eCkgPT4ge1xuICAgIGF3YWl0IGN0eC5zY2VuZS5lbnRlcihTY2VuZU5hbWVzLlBSSVZBQ1kpXG59KVxuIl19